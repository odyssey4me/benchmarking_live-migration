#!/usr/bin/env bash

function measure_tcp_loss() {
python <<EOL
filename = "$1"
loss = 0
f = open(filename,'rwb')
l = f.read()
numbers = filter(lambda x: x.isdigit(), l.split('\n'))
previous = int(numbers[0])
for i in numbers[1:]:
  diff = int(i) - previous
  if (diff > 1):
    loss += (diff - 1)
  previous = int(i)
print loss
EOL
}

# example to call this fuunction wait_instances compute01
function wait_instances () {
    echo "Waiting till all instances are up"
    sleep 25;
    servers_building=`openstack server list --host $1 | grep "BUILD" -c`
    until [ $servers_building  -eq 0 ]; do
        echo $servers_building
        sleep 15
        servers_building=`openstack server list --host $1 | grep "BUILD" -c`
    done
}

function add_vm_timing(){
      count=1
      a=`rally task results | jq -r '.[0]["result"][0]["atomic_actions"] ' | grep "nova.live_migrate" | awk  -F ":" '{ print $2}' | tr -d ', '`
      for line in $a;do
         echo "live migration duration for VM$count: $line" | tee -a $1
         count=$((count+1))
      done    
}
function wait_stack_deleted () {
    echo "Waiting till stack is deleted"
    sleep 10;
    stacks_creating=`openstack stack list | grep DELETE_IN_PROGRESS -c`
    until [ $stacks_creating  -eq 0 ]; do
        echo $stacks_creating
        sleep 10
        stacks_creating=`openstack stack list | grep DELETE_IN_PROGRESS -c`
    done
}

function wait_stack () {
    echo "Waiting till stack is created"
    sleep 10;
    stacks_creating=`openstack stack list | grep CREATE_IN_PROGRESS -c`
    until [ $stacks_creating  -eq 0 ]; do
        echo $stacks_creating
        sleep 10
        stacks_creating=`openstack stack list | grep CREATE_IN_PROGRESS -c`
    done
}

# to call this function: describe_environment workload_vms file_name flavor_used
function describe_environment() {

  workload_vms=$1
  cat >> $2 << EOF
All instances are up and running;
--> testing the current environment:
     `echo $workload_vms | cut -d' ' -f1` VMs, `echo $workload_vms | cut -d' ' -f2` VMs, `echo $workload_vms | cut -d' ' -f3` VMs, `echo $workload_vms | cut -d' ' -f4` VMs
     flavor of workloads used is $3
EOF

}

function average_duration() {
python <<EOL
total_duration = "$1"
n = int($2)
h = int(total_duration.split(":")[0])
m = int(total_duration.split(":")[1])
s = int(total_duration.split(":")[2])
dur = (h * 3600) + ( m * 60) + s
average = (dur / n) / 60.0
print average
EOL
}
function add_duration() {
python <<EOL
duration1 = "$1"
duration2 = "$2"
h = int(duration1.split(":")[0]) + int(duration2.split(":")[0])
m = int(duration1.split(":")[1]) + int(duration2.split(":")[1])
s = int(duration1.split(":")[2]) + int(duration2.split(":")[2])
tot_duration = "%d:%d:%d" %(h,m,s)
print tot_duration
EOL
}

function get_specs_server() {
ip=$1
ssh -q -o StrictHostKeyChecking=no root@$ip << EOF
  echo 'start'
  printf "specs for server $ip"
  printf '\nCPU info: ---------->\n'
  lscpu | grep ^CPU\(s\):
  printf '\nmemory info: ---------->\n'
  vmstat -s | grep memory
  printf '\ndisk info: ---------->\n'
  lsblk -io KNAME,TYPE,SIZE,MODEL
  printf '\nnetwork devices info: ---------->\n'
  lspci | grep -i eth
EOF
}
